--------------------------------------- КОНЦЕПЦИЯ ---------------------------------------

1. SparseMatrix хранится в формате CSR. Доступ к элементу через двойные скобки и 
разыменование через прокси-классы. Подробнее в ReadMeSparse.txt;
2. DenseMatrix хранится в формате вектор векторов.

-------------------------------------- КЛАСС GRAPH -------------------------------------

------------ Информационные поля ------------

Matrix * AdjMat;
	Квадратная матрица смежности. Может иметь тип SparseMatrix либо DenseMatrix. Тип
	матрицы выбирается при создании графа
	
bool oriented;
	Флаг, обозначающий, ориентированный ли граф или нет.

bool isFilled (std::vector<bool> vec);
	Утилита, используется при реализации метода double Diameter().
	
size_t min_unvis (std::vector<double> vec, std::vector<bool> vis);
	Утилита, используется при реализации метода double Diameter().
	
double max_w (std::vector<double> vec, size_t cur);
	Утилита, используется при реализации метода double Diameter().
	
------------ Методы ------------

Graph (Matrix *);
	Конструктор. Создание графа с помощью квадртаной матрицы смежности. При попытке
	создать граф с помощью не квадратной матрицы генерируется исключение. При вызове
	конструктора автоматически вызывается метод isOriented(), определяющий, 
	является ли граф ориентированным (т.е. симметрична ли матрица относительно
	главной диагонали).
	
Graph (const Graph &);
	Конструктор копирования. 
	
Graph& operator=(Graph&);
	Обычное копирование.

void make_not_orient ();
	Из ориентированного графа делает неориентированный с помощью отражения ненулевых 
	элементов относительно главной диагонали. Если существует путь из одной вершины в
	другую, вес которого не равен весу пути из другой вершины в первую, то 
	предпочтение отдается весу, расположенному над главной диагональю. Пример:
	 \ 0 1 2       \ 0 1 2 
	0| 0 1 0      0| 0 1 0
	1| 3 0 1  =>  1| 1 0 1
	2| 0 0 0      2| 0 1 0

size_t Bonded_components();
	Функция, возвращающая количество связных компонент графа.
	! В реализации метода используются итераторы RowIterator, позволяющие 
	итерироваться по ненулевым элементам матрицы смежности.

bool isOriented ();
	Функция, возвращающая 1 если граф ориентированный (матрица смежности не 
	симметрична относительно главной диагонали), и 0, если граф ориентированный.
	
double Diameter ();
	Функция, возвращающая диаметр графа. При реализации использовался алгоритм
	Дейкстры. При попытке вычислить диаметр для несвязного, ориентированного графа 
	или графа, содержащего отрицательные веса путей, генерируется исключение.
	! В реализации метода используются итераторы RowIterator, позволяющие 
	итерироваться по ненулевым элементам матрицы смежности.
	
void Print ();
	Функция-утилита, печатающая матрицу смежности.
	
void AddRib (size_t x, size_t y, double val);
	Функция, добавляющая путь из вершины x в вершину y с весом val.
